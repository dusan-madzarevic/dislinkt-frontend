# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  pull_request:
  push:
    branches:
     - main
     - development
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build, Test & Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
            
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm install --no-package-lock
        working-directory: ./front-dislinkt
          
      - name: Run Unit Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless
        working-directory: ./front-dislinkt
        
      - name: Build Application
        run: npm run build
        working-directory: ./front-dislinkt
        
      - name: Zip dist folder
        run: zip -r dist.zip dist
        working-directory: ./front-dislinkt
        
      - name: Prepare release plugins
        run: npm install @semantic-release/git @semantic-release/changelog @semantic-release/exec -D
        working-directory: ./front-dislinkt
        
      - name: Release
        working-directory: ./front-dislinkt
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
    
        
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: front-dislinkt
          args: >
            -Dsonar.sources=./src/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
          
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    needs: build

    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker meta
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ducom98/dislinkt-frontend
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      # setup Docker buld action
      - name: Set up Docker Buildx
        if: github.event_name != 'pull_request'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build image and push to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./front-dislinkt
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo ${{ steps.docker_build.outputs.digest }}
